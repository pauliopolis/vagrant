ENV['VBOX_INSTALL_PATH'] = ENV['VBOX_MSI_INSTALL_PATH']
# -*- mode: ruby -*-
# vi: set ft=ruby:

BOX = "pauliopolis/rhel8"
VERSION = "1.0.3"
NODES = 3
RAM = 2048
CPUS = 2

require_relative '../.secrets.rb'
include Secrets

unregister_script = %{
if sudo subscription-manager status; then
  sudo subscription-manager unregister
fi
}

Vagrant.configure("2") do |config|
  (1..NODES).each do |i|
    config.vm.define "node#{i}" do |node|

      node.vbguest.auto_update = false if Vagrant.has_plugin?("vagrant-vbguest")

      if Vagrant.has_plugin?('vagrant-registration')
        node.registration.username = "#{RHUSER}"
        node.registration.password = "#{RHPASS}"
        node.registration.skip = false
        node.registration.unregister_on_halt = false
      end

      node.vm.provision "subscription-manager", type: "shell" do |subscribe|
        subscribe.inline = "subscription-manager register --force --username=#{RHUSER} --password=#{RHPASS}"
      end # node.vm.provision

      node.vm.provision "update", type: "ansible_local", run: "never" do |update|
        update.playbook = "/ansible/update.yml"
        update.verbose = false
        update.compatibility_mode = "2.0"
      end # node.vm.provision

      node.vm.provision "certs", type: "ansible_local", run: "never" do |certs|
        certs.playbook = "/ansible/certs.yml"
        certs.verbose = false
        certs.compatibility_mode = "2.0"
      end # node.vm.provision

      node.vm.provision "galaxy", type: "ansible_local", run: "never" do |galaxy|
        galaxy.playbook = "/ansible/galaxy.yml"
        galaxy.verbose = false
        galaxy.compatibility_mode = "2.0"
      end # node.vm.provision

      node.vm.provision "vga", type: "ansible_local", run: "never" do |vga|
        vga.playbook = "/ansible/vga.yml"
        vga.verbose = false
        vga.compatibility_mode = "2.0"
      end # node.vm.provision

      node.vm.provision "cleanup", type: "ansible_local", run: "never" do |cleanup|
        cleanup.playbook = "/ansible/cleanup.yml"
        cleanup.verbose = false
        cleanup.compatibility_mode = "2.0"
      end # node.vm.provision

      node.vm.provision "kafka", type: "ansible_local", run: "never" do |kafka|
        kafka.playbook = "/ansible/kafka.yml"
        kafka.verbose = false
        kafka.compatibility_mode = "2.0"
      end # node.vm.provision

      node.trigger.before :destroy do |unregister|
        unregister.name = "Unregister VM"
        unregister.info = "Unregistering this VM from RedHat Subscription Manager..."
        unregister.warn = "If this fails, unregister VMs manually at https://access.redhat.com/management/subscriptions"
        unregister.run_remote = {inline: unregister_script}
        unregister.on_error = :continue
      end # node.trigger.before
      
      node.vm.provider "virtualbox" do |vbox|
        vbox.gui = false
        vbox.memory = RAM
        vbox.cpus = CPUS
	vbox.customize ['modifyvm', :id, '--graphicscontroller', 'vmsvga']
      end # node.vm.provider

      node.vm.box = BOX
      node.vm.box_version = VERSION
      node.vm.hostname = "pl-node#{i}"
      node.vm.boot_timeout = 1500
      node.vm.synced_folder "../ansible", "/ansible"
      node.vm.network "private_network", ip: "192.168.1.#{i + 10}"
    end # config.vm.define
  end # NODES loop
end # Vagrant.configure
